# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_matrixio_hal')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_matrixio_hal')
    _matrixio_hal = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_matrixio_hal', [dirname(__file__)])
        except ImportError:
            import _matrixio_hal
            return _matrixio_hal
        if fp is not None:
            try:
                _mod = imp.load_module('_matrixio_hal', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _matrixio_hal = swig_import_helper()
    del swig_import_helper
else:
    import _matrixio_hal
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _matrixio_hal.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _matrixio_hal.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _matrixio_hal.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _matrixio_hal.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _matrixio_hal.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _matrixio_hal.SwigPyIterator_equal(self, x)

    def copy(self):
        return _matrixio_hal.SwigPyIterator_copy(self)

    def next(self):
        return _matrixio_hal.SwigPyIterator_next(self)

    def __next__(self):
        return _matrixio_hal.SwigPyIterator___next__(self)

    def previous(self):
        return _matrixio_hal.SwigPyIterator_previous(self)

    def advance(self, n):
        return _matrixio_hal.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _matrixio_hal.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _matrixio_hal.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _matrixio_hal.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _matrixio_hal.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _matrixio_hal.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _matrixio_hal.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _matrixio_hal.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class WishboneBus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WishboneBus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WishboneBus, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _matrixio_hal.new_WishboneBus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SpiInit(self):
        return _matrixio_hal.WishboneBus_SpiInit(self)

    def SpiWrite(self, add, data, length):
        return _matrixio_hal.WishboneBus_SpiWrite(self, add, data, length)

    def SpiWrite16(self, add, data):
        return _matrixio_hal.WishboneBus_SpiWrite16(self, add, data)

    def GetSoftwareVersion(self, version, length):
        return _matrixio_hal.WishboneBus_GetSoftwareVersion(self, version, length)

    def GetFPGAFrequency(self):
        return _matrixio_hal.WishboneBus_GetFPGAFrequency(self)

    def SpiReadBurst(self, add, data, length):
        return _matrixio_hal.WishboneBus_SpiReadBurst(self, add, data, length)

    def SpiWriteBurst(self, add, data, length):
        return _matrixio_hal.WishboneBus_SpiWriteBurst(self, add, data, length)

    def SpiRead(self, add, data, length):
        return _matrixio_hal.WishboneBus_SpiRead(self, add, data, length)

    def SpiRead16(self, add, data):
        return _matrixio_hal.WishboneBus_SpiRead16(self, add, data)

    def SpiClose(self):
        return _matrixio_hal.WishboneBus_SpiClose(self)

    def FPGAClock(self):
        return _matrixio_hal.WishboneBus_FPGAClock(self)
    __swig_destroy__ = _matrixio_hal.delete_WishboneBus
    __del__ = lambda self: None
WishboneBus_swigregister = _matrixio_hal.WishboneBus_swigregister
WishboneBus_swigregister(WishboneBus)
cvar = _matrixio_hal.cvar
kFPGAClock = cvar.kFPGAClock

class MatrixDriver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDriver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDriver, name)
    __repr__ = _swig_repr

    def Setup(self, wishbone):
        return _matrixio_hal.MatrixDriver_Setup(self, wishbone)

    def __init__(self):
        this = _matrixio_hal.new_MatrixDriver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrixio_hal.delete_MatrixDriver
    __del__ = lambda self: None
MatrixDriver_swigregister = _matrixio_hal.MatrixDriver_swigregister
MatrixDriver_swigregister(MatrixDriver)
kConfBaseAddress = cvar.kConfBaseAddress
kUartBaseAddress = cvar.kUartBaseAddress
kMicrophoneArrayBaseAddress = cvar.kMicrophoneArrayBaseAddress
kEverloopBaseAddress = cvar.kEverloopBaseAddress
kGPIOBaseAddress = cvar.kGPIOBaseAddress
kMCUBaseAddress = cvar.kMCUBaseAddress
kAudioOutputBaseAddress = cvar.kAudioOutputBaseAddress
kMemoryOffsetUV = cvar.kMemoryOffsetUV
kMemoryOffsetPressure = cvar.kMemoryOffsetPressure
kMemoryOffsetHumidity = cvar.kMemoryOffsetHumidity
kMemoryOffsetIMU = cvar.kMemoryOffsetIMU
kMemoryOffsetMCU = cvar.kMemoryOffsetMCU

class MCUData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCUData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCUData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ID"] = _matrixio_hal.MCUData_ID_set
    __swig_getmethods__["ID"] = _matrixio_hal.MCUData_ID_get
    if _newclass:
        ID = _swig_property(_matrixio_hal.MCUData_ID_get, _matrixio_hal.MCUData_ID_set)
    __swig_setmethods__["version"] = _matrixio_hal.MCUData_version_set
    __swig_getmethods__["version"] = _matrixio_hal.MCUData_version_get
    if _newclass:
        version = _swig_property(_matrixio_hal.MCUData_version_get, _matrixio_hal.MCUData_version_set)

    def __init__(self):
        this = _matrixio_hal.new_MCUData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrixio_hal.delete_MCUData
    __del__ = lambda self: None
MCUData_swigregister = _matrixio_hal.MCUData_swigregister
MCUData_swigregister(MCUData)

class MCUFirmware(MatrixDriver):
    __swig_setmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCUFirmware, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCUFirmware, name)
    __repr__ = _swig_repr

    def Read(self, data):
        return _matrixio_hal.MCUFirmware_Read(self, data)

    def __init__(self):
        this = _matrixio_hal.new_MCUFirmware()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrixio_hal.delete_MCUFirmware
    __del__ = lambda self: None
MCUFirmware_swigregister = _matrixio_hal.MCUFirmware_swigregister
MCUFirmware_swigregister(MCUFirmware)

class LedValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LedValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LedValue, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _matrixio_hal.new_LedValue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["red"] = _matrixio_hal.LedValue_red_set
    __swig_getmethods__["red"] = _matrixio_hal.LedValue_red_get
    if _newclass:
        red = _swig_property(_matrixio_hal.LedValue_red_get, _matrixio_hal.LedValue_red_set)
    __swig_setmethods__["green"] = _matrixio_hal.LedValue_green_set
    __swig_getmethods__["green"] = _matrixio_hal.LedValue_green_get
    if _newclass:
        green = _swig_property(_matrixio_hal.LedValue_green_get, _matrixio_hal.LedValue_green_set)
    __swig_setmethods__["blue"] = _matrixio_hal.LedValue_blue_set
    __swig_getmethods__["blue"] = _matrixio_hal.LedValue_blue_get
    if _newclass:
        blue = _swig_property(_matrixio_hal.LedValue_blue_get, _matrixio_hal.LedValue_blue_set)
    __swig_setmethods__["white"] = _matrixio_hal.LedValue_white_set
    __swig_getmethods__["white"] = _matrixio_hal.LedValue_white_get
    if _newclass:
        white = _swig_property(_matrixio_hal.LedValue_white_get, _matrixio_hal.LedValue_white_set)
    __swig_destroy__ = _matrixio_hal.delete_LedValue
    __del__ = lambda self: None
LedValue_swigregister = _matrixio_hal.LedValue_swigregister
LedValue_swigregister(LedValue)

class EverloopImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EverloopImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EverloopImage, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _matrixio_hal.new_EverloopImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["leds"] = _matrixio_hal.EverloopImage_leds_set
    __swig_getmethods__["leds"] = _matrixio_hal.EverloopImage_leds_get
    if _newclass:
        leds = _swig_property(_matrixio_hal.EverloopImage_leds_get, _matrixio_hal.EverloopImage_leds_set)
    __swig_destroy__ = _matrixio_hal.delete_EverloopImage
    __del__ = lambda self: None
EverloopImage_swigregister = _matrixio_hal.EverloopImage_swigregister
EverloopImage_swigregister(EverloopImage)
kMatrixCreatorNLeds = cvar.kMatrixCreatorNLeds

class Everloop(MatrixDriver):
    __swig_setmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Everloop, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Everloop, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _matrixio_hal.new_Everloop()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Write(self, led_image):
        return _matrixio_hal.Everloop_Write(self, led_image)
    __swig_destroy__ = _matrixio_hal.delete_Everloop
    __del__ = lambda self: None
Everloop_swigregister = _matrixio_hal.Everloop_swigregister
Everloop_swigregister(Everloop)

class CrossCorrelation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrossCorrelation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrossCorrelation, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _matrixio_hal.new_CrossCorrelation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrixio_hal.delete_CrossCorrelation
    __del__ = lambda self: None

    def Init(self, N):
        return _matrixio_hal.CrossCorrelation_Init(self, N)

    def Release(self):
        return _matrixio_hal.CrossCorrelation_Release(self)

    def Exec(self, a, b):
        return _matrixio_hal.CrossCorrelation_Exec(self, a, b)

    def Result(self):
        return _matrixio_hal.CrossCorrelation_Result(self)
CrossCorrelation_swigregister = _matrixio_hal.CrossCorrelation_swigregister
CrossCorrelation_swigregister(CrossCorrelation)

class MicrophoneArray(MatrixDriver):
    __swig_setmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MicrophoneArray, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MicrophoneArray, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _matrixio_hal.new_MicrophoneArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _matrixio_hal.delete_MicrophoneArray
    __del__ = lambda self: None

    def Setup(self, wishbone):
        return _matrixio_hal.MicrophoneArray_Setup(self, wishbone)

    def Read(self):
        return _matrixio_hal.MicrophoneArray_Read(self)

    def SamplingRate(self):
        return _matrixio_hal.MicrophoneArray_SamplingRate(self)

    def DecimationRatio(self):
        return _matrixio_hal.MicrophoneArray_DecimationRatio(self)

    def Gain(self):
        return _matrixio_hal.MicrophoneArray_Gain(self)

    def GetDecimationRatio(self):
        return _matrixio_hal.MicrophoneArray_GetDecimationRatio(self)

    def GetPDMRatio(self):
        return _matrixio_hal.MicrophoneArray_GetPDMRatio(self)

    def SetPDMRatio(self, pdm_ratio):
        return _matrixio_hal.MicrophoneArray_SetPDMRatio(self, pdm_ratio)

    def SetSamplingRate(self, sampling_frequency):
        return _matrixio_hal.MicrophoneArray_SetSamplingRate(self, sampling_frequency)

    def SetDecimationRatio(self, decimation_counter):
        return _matrixio_hal.MicrophoneArray_SetDecimationRatio(self, decimation_counter)

    def GetGain(self):
        return _matrixio_hal.MicrophoneArray_GetGain(self)

    def SetGain(self, gain):
        return _matrixio_hal.MicrophoneArray_SetGain(self, gain)

    def ReadConfValues(self):
        return _matrixio_hal.MicrophoneArray_ReadConfValues(self)

    def ShowConfiguration(self):
        return _matrixio_hal.MicrophoneArray_ShowConfiguration(self)

    def Channels(self):
        return _matrixio_hal.MicrophoneArray_Channels(self)

    def NumberOfSamples(self):
        return _matrixio_hal.MicrophoneArray_NumberOfSamples(self)

    def At(self, sample, channel):
        return _matrixio_hal.MicrophoneArray_At(self, sample, channel)

    def Beam(self, sample):
        return _matrixio_hal.MicrophoneArray_Beam(self, sample)

    def CalculateDelays(self, azimutal_angle, polar_angle, radial_distance_mm=100.0, sound_speed_mmseg=320):
        return _matrixio_hal.MicrophoneArray_CalculateDelays(self, azimutal_angle, polar_angle, radial_distance_mm, sound_speed_mmseg)
MicrophoneArray_swigregister = _matrixio_hal.MicrophoneArray_swigregister
MicrophoneArray_swigregister(MicrophoneArray)
kPDMFrequency = cvar.kPDMFrequency
kCICStages = cvar.kCICStages
kCICWidth = cvar.kCICWidth
kMicarrayBufferSize = cvar.kMicarrayBufferSize
kMicrophoneArrayIRQ = cvar.kMicrophoneArrayIRQ
kMicrophoneChannels = cvar.kMicrophoneChannels

class DirectionOfArrival(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DirectionOfArrival, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DirectionOfArrival, name)
    __repr__ = _swig_repr

    def __init__(self, mics):
        this = _matrixio_hal.new_DirectionOfArrival(mics)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self):
        return _matrixio_hal.DirectionOfArrival_Init(self)

    def Calculate(self):
        return _matrixio_hal.DirectionOfArrival_Calculate(self)

    def GetAzimutalAngle(self):
        return _matrixio_hal.DirectionOfArrival_GetAzimutalAngle(self)

    def GetPolarAngle(self):
        return _matrixio_hal.DirectionOfArrival_GetPolarAngle(self)

    def GetNearestMicrophone(self):
        return _matrixio_hal.DirectionOfArrival_GetNearestMicrophone(self)
    __swig_destroy__ = _matrixio_hal.delete_DirectionOfArrival
    __del__ = lambda self: None
DirectionOfArrival_swigregister = _matrixio_hal.DirectionOfArrival_swigregister
DirectionOfArrival_swigregister(DirectionOfArrival)

class GPIOBank(MatrixDriver):
    __swig_setmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPIOBank, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPIOBank, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _matrixio_hal.new_GPIOBank()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetupTimer(self, channel, init_event, final_event):
        return _matrixio_hal.GPIOBank_SetupTimer(self, channel, init_event, final_event)

    def SetPeriod(self, period):
        return _matrixio_hal.GPIOBank_SetPeriod(self, period)

    def SetDuty(self, channel, duty):
        return _matrixio_hal.GPIOBank_SetDuty(self, channel, duty)

    def GetTimerCounter(self, channel):
        return _matrixio_hal.GPIOBank_GetTimerCounter(self, channel)
    __swig_setmethods__["mem_offset_"] = _matrixio_hal.GPIOBank_mem_offset__set
    __swig_getmethods__["mem_offset_"] = _matrixio_hal.GPIOBank_mem_offset__get
    if _newclass:
        mem_offset_ = _swig_property(_matrixio_hal.GPIOBank_mem_offset__get, _matrixio_hal.GPIOBank_mem_offset__set)
    __swig_setmethods__["timer_setup_"] = _matrixio_hal.GPIOBank_timer_setup__set
    __swig_getmethods__["timer_setup_"] = _matrixio_hal.GPIOBank_timer_setup__get
    if _newclass:
        timer_setup_ = _swig_property(_matrixio_hal.GPIOBank_timer_setup__get, _matrixio_hal.GPIOBank_timer_setup__set)
    __swig_destroy__ = _matrixio_hal.delete_GPIOBank
    __del__ = lambda self: None
GPIOBank_swigregister = _matrixio_hal.GPIOBank_swigregister
GPIOBank_swigregister(GPIOBank)

class GPIOControl(MatrixDriver):
    __swig_setmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPIOControl, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixDriver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPIOControl, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _matrixio_hal.new_GPIOControl()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Setup(self, wishbone):
        return _matrixio_hal.GPIOControl_Setup(self, wishbone)

    def SetMode(self, *args):
        return _matrixio_hal.GPIOControl_SetMode(self, *args)

    def SetFunction(self, pin, function):
        return _matrixio_hal.GPIOControl_SetFunction(self, pin, function)

    def GetGPIOValue(self, pin):
        return _matrixio_hal.GPIOControl_GetGPIOValue(self, pin)

    def GetGPIOValues(self):
        return _matrixio_hal.GPIOControl_GetGPIOValues(self)

    def SetGPIOValue(self, pin, value):
        return _matrixio_hal.GPIOControl_SetGPIOValue(self, pin, value)

    def SetGPIOValues(self, pinList, length, value):
        return _matrixio_hal.GPIOControl_SetGPIOValues(self, pinList, length, value)

    def GetIRValue(self):
        return _matrixio_hal.GPIOControl_GetIRValue(self)

    def SetIR(self, value):
        return _matrixio_hal.GPIOControl_SetIR(self, value)

    def SetRingIR(self, value):
        return _matrixio_hal.GPIOControl_SetRingIR(self, value)

    def SetPrescaler(self, bank, prescaler):
        return _matrixio_hal.GPIOControl_SetPrescaler(self, bank, prescaler)

    def Bank(self, bank):
        return _matrixio_hal.GPIOControl_Bank(self, bank)
    __swig_setmethods__["banks_"] = _matrixio_hal.GPIOControl_banks__set
    __swig_getmethods__["banks_"] = _matrixio_hal.GPIOControl_banks__get
    if _newclass:
        banks_ = _swig_property(_matrixio_hal.GPIOControl_banks__get, _matrixio_hal.GPIOControl_banks__set)
    __swig_setmethods__["mode_"] = _matrixio_hal.GPIOControl_mode__set
    __swig_getmethods__["mode_"] = _matrixio_hal.GPIOControl_mode__get
    if _newclass:
        mode_ = _swig_property(_matrixio_hal.GPIOControl_mode__get, _matrixio_hal.GPIOControl_mode__set)
    __swig_setmethods__["value_"] = _matrixio_hal.GPIOControl_value__set
    __swig_getmethods__["value_"] = _matrixio_hal.GPIOControl_value__get
    if _newclass:
        value_ = _swig_property(_matrixio_hal.GPIOControl_value__get, _matrixio_hal.GPIOControl_value__set)
    __swig_setmethods__["function_"] = _matrixio_hal.GPIOControl_function__set
    __swig_getmethods__["function_"] = _matrixio_hal.GPIOControl_function__get
    if _newclass:
        function_ = _swig_property(_matrixio_hal.GPIOControl_function__get, _matrixio_hal.GPIOControl_function__set)
    __swig_setmethods__["prescaler_"] = _matrixio_hal.GPIOControl_prescaler__set
    __swig_getmethods__["prescaler_"] = _matrixio_hal.GPIOControl_prescaler__get
    if _newclass:
        prescaler_ = _swig_property(_matrixio_hal.GPIOControl_prescaler__get, _matrixio_hal.GPIOControl_prescaler__set)
    __swig_destroy__ = _matrixio_hal.delete_GPIOControl
    __del__ = lambda self: None
GPIOControl_swigregister = _matrixio_hal.GPIOControl_swigregister
GPIOControl_swigregister(GPIOControl)

class LedsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LedsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LedsVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _matrixio_hal.LedsVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _matrixio_hal.LedsVector___nonzero__(self)

    def __bool__(self):
        return _matrixio_hal.LedsVector___bool__(self)

    def __len__(self):
        return _matrixio_hal.LedsVector___len__(self)

    def __getslice__(self, i, j):
        return _matrixio_hal.LedsVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _matrixio_hal.LedsVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _matrixio_hal.LedsVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _matrixio_hal.LedsVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _matrixio_hal.LedsVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _matrixio_hal.LedsVector___setitem__(self, *args)

    def pop(self):
        return _matrixio_hal.LedsVector_pop(self)

    def append(self, x):
        return _matrixio_hal.LedsVector_append(self, x)

    def empty(self):
        return _matrixio_hal.LedsVector_empty(self)

    def size(self):
        return _matrixio_hal.LedsVector_size(self)

    def swap(self, v):
        return _matrixio_hal.LedsVector_swap(self, v)

    def begin(self):
        return _matrixio_hal.LedsVector_begin(self)

    def end(self):
        return _matrixio_hal.LedsVector_end(self)

    def rbegin(self):
        return _matrixio_hal.LedsVector_rbegin(self)

    def rend(self):
        return _matrixio_hal.LedsVector_rend(self)

    def clear(self):
        return _matrixio_hal.LedsVector_clear(self)

    def get_allocator(self):
        return _matrixio_hal.LedsVector_get_allocator(self)

    def pop_back(self):
        return _matrixio_hal.LedsVector_pop_back(self)

    def erase(self, *args):
        return _matrixio_hal.LedsVector_erase(self, *args)

    def __init__(self, *args):
        this = _matrixio_hal.new_LedsVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _matrixio_hal.LedsVector_push_back(self, x)

    def front(self):
        return _matrixio_hal.LedsVector_front(self)

    def back(self):
        return _matrixio_hal.LedsVector_back(self)

    def assign(self, n, x):
        return _matrixio_hal.LedsVector_assign(self, n, x)

    def resize(self, *args):
        return _matrixio_hal.LedsVector_resize(self, *args)

    def insert(self, *args):
        return _matrixio_hal.LedsVector_insert(self, *args)

    def reserve(self, n):
        return _matrixio_hal.LedsVector_reserve(self, n)

    def capacity(self):
        return _matrixio_hal.LedsVector_capacity(self)
    __swig_destroy__ = _matrixio_hal.delete_LedsVector
    __del__ = lambda self: None
LedsVector_swigregister = _matrixio_hal.LedsVector_swigregister
LedsVector_swigregister(LedsVector)

# This file is compatible with both classic and new-style classes.


